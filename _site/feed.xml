<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2022-10-20T01:14:59+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">이직하고싶은 동동이</title><subtitle>이직을 위한 한걸음 코딩 배우기</subtitle><author><name>Dong Hyun Lim</name></author><entry><title type="html">파이썬 불 자료형</title><link href="http://localhost:4000/%EA%B3%B5%EB%B6%80/2022/10/19/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%B6%88_%EC%9E%90%EB%A3%8C%ED%98%95.html" rel="alternate" type="text/html" title="파이썬 불 자료형" /><published>2022-10-19T23:28:00+09:00</published><updated>2022-10-19T23:28:00+09:00</updated><id>http://localhost:4000/%EA%B3%B5%EB%B6%80/2022/10/19/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%B6%88_%EC%9E%90%EB%A3%8C%ED%98%95</id><content type="html" xml:base="http://localhost:4000/%EA%B3%B5%EB%B6%80/2022/10/19/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%B6%88_%EC%9E%90%EB%A3%8C%ED%98%95.html"><![CDATA[<h1 id="불-자료형">불 자료형</h1>

<h2 id="불-자요형이란">불 자요형이란?</h2>
<p>불 자료형이란 간단하게 이야기 하자면 참이냐 거짓이냐를 알려주는 자료형이다.<br />
불 자료형은 특성상 참(True), 거짓(False) 두가지의 값만 가질 수 있다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = True
b = False
</code></pre></div></div>
<p>이렇게 변수로 True와 False 만들어 보았다. 우리는 문자열을 항상 따옴표로 감싼는데 
True와 False 오류가 나지 않는다 하지만 사용시 꼭 첫문자는 대문자로 사용해야 한다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>type(a)
&lt;class 'bool'&gt;
type(b)
&lt;class 'bool'&gt;
</code></pre></div></div>
<p>type 함수는 자료형을 확인하는 파이썬 내장 함수로써 type 함수를 이용해 a 와 b 변수가 bool로 지정된 것을 확인할 수 있다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2 == 2
True

5 &gt; 1
True

5 &lt; 1
False
</code></pre></div></div>
<p>위 처럼 불 자료형은 조건문의 반환 값으로도 사용이 된다.<br />
<code class="language-plaintext highlighter-rouge">2 == 2</code> 는 2와 2가 같은 가라는 조건문 이다. 참이기에 True가 나온것이다.
아래도 동일하게 5가 1보다 크기에 True, 5가 1보다 작다는 맞지 않기에 False 이 나온것이다.</p>

<h2 id="자료형의-참과-거짓">자료형의 참과 거짓</h2>
<p>뭔가 조금 이상하게 들릴 수 있다.<br />
자료형에 참과 거짓이 있다는게 하지만 분명히 존재 한다.</p>

<p>기준을 한번 살펴 보자</p>

<blockquote>
  <p>“python” 참<br />
[] 거짓<br />
[2, 3, 4] 참<br />
[] 거짓<br />
() 거짓
{} 거짓<br />
1 참<br />
0 거짓<br />
None 거짓</p>
</blockquote>

<p>이러한 방식으로 비어있는 (문자열, 리스트, 튜플, 딕셔너리) 값은 거짓이 된다.
비어있지 않다면 참이되는 것이다. 숫자는 0은 거짓이 된다.
None 은 그냥 거짓을 뜻한다고만 알아두면 된다.</p>

<p>자 그럼 참과 거짓이 프로그램에서 어떤 방식으로 쓰이는지 한번 보자</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = [1, 2, 3, 4]
while a:
    print(a.pop())
4
3
2
1
</code></pre></div></div>
<p>위에 while문은 이후에 배울 것이지만 한번 간단하게 보자면 
변수 리스트 에서 a 가 참일경우 a.pop() 를 계속 수행 하라는 것이다.
a.pop는 리스트 a의 마지막 요소를 끄집어 삭제하는 함수기에 리스트에 요소가 존재하는한 <br />
마지막 요소를 끄집어 내고 더이상 없다면 a가 빈 리스트가 되어 거짓이 되는 문장이다.
그래서 마지막에 빈 리스트가 되어 거짓이 되어서 중지된다.</p>

<p>다른 예시로 한번 간단하게 해보자</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if []:
    print("참")
else:
    print("거짓")

거짓
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if [1, 2, 3]:
    print("참")
else:
    print("거짓")
    
참
</code></pre></div></div>
<p>두 코드로 보면 설명 하자면 만약 []가 참이면 “참”이란 값을, 거짓이면 “거짓”이란 값을 주게 만든 if문 이다.
앞에 코드는 비었기에 거짓을 주었고 아래는 요소가 있는 [1, 2, 3] 참인 리스트 이기에 참을 주게 된것이다.</p>

<h2 id="뷸-연산">뷸 연산</h2>
<p>위에 이야기 했듯이 자료형에 참과 거짓이 있다는걸 알게 되었다.
그럼 bool 함수를 이용해 참과 거짓을 한번 예제로 통해 알아보자.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bool('SCUBA')
True
</code></pre></div></div>
<p>빈 문자열이 아니기에 bool 연산 결과 참이기에 Ttue를 돌려줬다.
다른 것들도 한번 해보자</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bool('')
False
</code></pre></div></div>
<p>비어있는 문자열이기에 False를 돌려준다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bool(['a', 'b', 'c']
True
</code></pre></div></div>
<p>마찬가지로 요소값이 있는 리스트형을 넣었기에 Ttue를 돌려준다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bool({})
False

bool(0)
False

bool(29)
True

bool(())
False

bool([])
False
</code></pre></div></div>

<p>여러가지 예제를 수행해봤다.
이렇게 불 자료형을 알아봤다.</p>

<p>이 포스팅은 점프투 파이썬을 보고 정리한 자료입니다.</p>]]></content><author><name>Dong Hyun Lim</name></author><category term="공부" /><category term="파이썬" /><category term="불" /><category term="공부" /><category term="정리" /><summary type="html"><![CDATA[불 자료형]]></summary></entry><entry><title type="html">파이썬 집합 자료형</title><link href="http://localhost:4000/%EA%B3%B5%EB%B6%80/2022/10/17/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EC%A7%91%ED%95%A9_%EC%9E%90%EB%A3%8C%ED%98%95.html" rel="alternate" type="text/html" title="파이썬 집합 자료형" /><published>2022-10-17T23:28:00+09:00</published><updated>2022-10-17T23:28:00+09:00</updated><id>http://localhost:4000/%EA%B3%B5%EB%B6%80/2022/10/17/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EC%A7%91%ED%95%A9_%EC%9E%90%EB%A3%8C%ED%98%95</id><content type="html" xml:base="http://localhost:4000/%EA%B3%B5%EB%B6%80/2022/10/17/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EC%A7%91%ED%95%A9_%EC%9E%90%EB%A3%8C%ED%98%95.html"><![CDATA[<h1 id="파이썬-집합-자료형">파이썬 집합 자료형</h1>

<h2 id="집합-자료형-만드는법">집합 자료형 만드는법</h2>
<p>집합은 말그대로 집합에 관련된걸 처리하기 위해 만들어진 자료형이다.</p>

<p>집합을 만드는방법은 set를 앞에 붙이고 사용하면 된다.
그럼 한번 집합 자료형을 만들어 보자.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>s1 = set([1, 2, 3])
s1
{1, 2, 3}
</code></pre></div></div>
<p>set 키워드를 이용해서 이렇게 집합 자료형을 만들 수 있다.<br />
이런식으로 리스트를 넣을 수도 있고 문자열을 넣을 수 있다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>s2 = set("apple")
s2
{'l', 'e', 'a', 'p'}
</code></pre></div></div>
<p>자 근데 뭔가 이상하지 않은가?<br />
순서대로 나열도 않되고 또한 P는 하나 없다.<br />
이게 바로 집합 자료형의 특징이다.<br />
set은 크게 두가지 특징이 있는데 하난 <strong>순서가 없다는점</strong> 그리고 <strong>중복을 허용하지 않는다는</strong> 것이다.<br />
중복을 허용하지 않기 때문에 자료형의 중복을 제거하는데 쓰이기도한다.</p>

<p>순서가 없는 특징 때문에 인덱싱을 통해 값을 얻을 수 없다.
만약 인덱싱을 통해 값을 얻고자 하면 리스트나 튜플로 변환해 구해야 한다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>s1 = set([1, 2, 3])
l1 = list(s1)
l1
[1, 2, 3]

l1[0]
1

t1 = tuple(s1)
t1
(1, 2, 3)
t1[0]
1
</code></pre></div></div>
<p>이런 방식으로 하면 인덱싱을 통해 값을 얻을 수 있다.</p>

<h2 id="교집합-합집합-차집합-구하기">교집합 합집합 차집합 구하기</h2>
<p>set이 유용하게 쓰이는곳은 바로 교집합, 합집합, 차집합을 즉 집합에 쓰일때이다.</p>

<p>자 그럼 하나씩 구해보도록 하자 먼저 set 자료형을 두개를 먼저 만들어 보자.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>s1 = set([1, 2, 3, 4, 5, 6])
s2 = set([4, 5, 6, 7, 8, 9])
</code></pre></div></div>

<h3 id="교집합">교집합</h3>
<p>위에 만든 set 자료형을 통해 교집합을 구해보자.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>s1 &amp; s2
{4, 5, 6}

s1.intersection(s2)
{4, 5, 6}
</code></pre></div></div>
<p>교집합을 구하는 방법은 &amp; 중간에 넣어서 만드는 법과 intersection 함수 두가지로 구할 수 있다.</p>

<h3 id="합집합">합집합</h3>
<p>이번엔 합집합을 구해보자.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>s1 | s2
{1, 2, 3, 4, 5, 6, 7, 8, 9}

s1.union(s2)
{1, 2, 3, 4, 5, 6, 7, 8, 9}
</code></pre></div></div>
<p>합집합도 | 넣어서 구하거나 union 함수를 이용해 구할 수 있다.
이때 중복된 4,5,6은 한번만 표시된다.</p>

<h3 id="차집합">차집합</h3>
<p>이번엔 차집합이다 차집합은 앞에 넣는것 뒤에 넣는것에 따라 달라지니 두가지 모두 구해보자.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>s1 - s2
{1, 2, 3}
s2 - s1
{8, 9, 7}

s1.difference(s2)
{1, 2, 3}
s2.difference(s1)
{8, 9, 7}
</code></pre></div></div>
<p>이러한 방식으로 차집합도 - 혹은 difference 함수를 통해 구할 수 있다.</p>

<h2 id="집합-관련-함수들">집합 관련 함수들</h2>

<h3 id="값-1개-추가">값 1개 추가</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>s1 = set([1, 2, 3])
s1.add(4)
s1
{1, 2, 3, 4}
</code></pre></div></div>
<p>이렇게 만들어진 집합 자료형에 값을 추가가 가능하다.<br />
그럼 이번엔 여러개를 넣어보자.</p>

<h3 id="값-여러개-추가">값 여러개 추가</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>s1 = set([1, 2, 3])
s1.update([4, 5, 6])
s1
{1, 2, 3, 4, 5, 6}
</code></pre></div></div>
<p>1개를 추가할 때와 여러개를 추가할 때 사용하는 함수가 다른걸 볼 수 있다.<br />
1개는 add를 여러개는 update를 사용한다.</p>

<h3 id="특정-값-삭제">특정 값 삭제</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>s1 = set([1, 2, 3])
s1.remove(2)
s1
{1, 3}
</code></pre></div></div>
<p>특정값을 제거하고 싶다면 remove 함수를 사용하면 특정 값을 제거가 가능하다.</p>

<p>이 포스팅은 점프투 파이썬을 보고 정리한 자료입니다.</p>]]></content><author><name>Dong Hyun Lim</name></author><category term="공부" /><category term="파이썬" /><category term="집합" /><category term="공부" /><category term="정리" /><summary type="html"><![CDATA[파이썬 집합 자료형]]></summary></entry><entry><title type="html">파이썬 딕셔너리 자료형</title><link href="http://localhost:4000/%EA%B3%B5%EB%B6%80/2022/10/16/%ED%8C%8C%EC%9D%B4%EC%84%A0_%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC_%EC%9E%90%EB%A3%8C%ED%98%95.html" rel="alternate" type="text/html" title="파이썬 딕셔너리 자료형" /><published>2022-10-16T00:10:00+09:00</published><updated>2022-10-16T00:10:00+09:00</updated><id>http://localhost:4000/%EA%B3%B5%EB%B6%80/2022/10/16/%ED%8C%8C%EC%9D%B4%EC%84%A0_%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC_%EC%9E%90%EB%A3%8C%ED%98%95</id><content type="html" xml:base="http://localhost:4000/%EA%B3%B5%EB%B6%80/2022/10/16/%ED%8C%8C%EC%9D%B4%EC%84%A0_%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC_%EC%9E%90%EB%A3%8C%ED%98%95.html"><![CDATA[<h1 id="딕셔너리-자료형">딕셔너리 자료형</h1>
<p>딕셔너리는 뜻 그대로 해석하면 사전이란 의미이다.
대응관계를 나타내는 자료형으로 key : value 형태로 쓰인다.
리스트형이나 튜플과는 다르게 순차적으로 요소값을 구하는게 아닌 Kye를 통해 Velue를 얻는형태이다.</p>

<h2 id="딕셔너리-만들기">딕셔너리 만들기</h2>

<p>기본적인 형태를 먼저 보자</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> {Key1:Value1, Key2:Value2, Key3:Value3, ...} 
</code></pre></div></div>
<p>이게 기본 딕셔너리의 형태이다.<br />
구분은 ,로 되어있고 Key : value 형태로 쌍으로 되어있다.<br />
여기서 가장 중요한 사실은 Key 값은 변할 수 없고 velue는 변하는 값, 변하지 않는값 모두 입력이 가능하다.</p>

<p>이제 그러면 여러 형태의 딕셔너리를 만들어보자</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dic = {'name' : 'Dong', 'phone' : '01080143930', 'birth' : '940623'}

a = {1 : 'hello'}

a = {'a' : [1, 2, 3]}
</code></pre></div></div>

<p>이렇게 만들 수 있다.</p>

<h2 id="딕셔너리-쌍-추가">딕셔너리 쌍 추가</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = {1 : 'a'}
a[2] = 'b'
a
{1: 'a', 2: 'b'}
</code></pre></div></div>

<p>이렇게 딕셔너리 쌍을 추가 할 수 있다.<br />
a[2] = ‘b’ 이렇게 입력은 a 인 {1 : ‘a’} 여기에 2 : ‘b’인 쌍을 추가하는 것이다.</p>

<p>또 다른 값을 추가해보자</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a['name'] = 'Dong'
a
{1: 'a', 2: 'b', 'name': 'Dong'}
</code></pre></div></div>
<p>이렇게 ‘name’: ‘Dong’ 쌍이 추가된다.
변수[추가할 kye] = 추가할 value 이러한 방식으로 추가하면 쌍이 추가가 된다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a[3] = [1, 2, 3]
a
{1: 'a', 2: 'b', 'name': 'Dong', 3: [1, 2, 3]}
</code></pre></div></div>
<p>이렇게 value는 리스트도 추가가 가능하다.</p>

<h3 id="딕셔너리-요소-삭제">딕셔너리 요소 삭제</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>del a[1]
a
{2: 'b', 'name': 'Dong', 3: [1, 2, 3]}
</code></pre></div></div>
<p>전에 배운 del 함수를 이용하면 del a[key] 형태로 입력을 하면 그에 해당하는 <br />
key와 value 쌍이 없어지게된다.</p>

<h2 id="딕셔너리-사용방법">딕셔너리 사용방법</h2>
<p>그렇다면 이런 딕셔너리를 어디에 사용을 할까 생각 할수 있다.
만약 동물의 어미의 이름과 새끼의 이름을 표현 하고 싶다.
리스트나 문자열에선 표현하기가 힘든걸 ‘소’ : ‘송아지’ 이러한 방식을 쓰면 아주 편하게 표현이 가능하다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{'소' : '송아지', '말' : '망아지', '개' : '강아지'} 
</code></pre></div></div>
<p>이런 식으로 사용도 가능 하다.</p>

<h3 id="딕셔너리-key-사용해-value-얻기">딕셔너리 key 사용해 value 얻기</h3>

<p>딕셔너리는 리스트나 튜플과 다르게 요소값을 얻을때 인덱싱이나 슬라이싱 기법을 사용하는게 아닌<br />
오직 Key 를 사용해 value를 구하는 방법 뿐이다.
Key에 value를 얻기 위해선 딕셔너리변수이름[kye]를 넣으면 value를 구할 수 있다.<br />
한번 예시로 보자.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = {1 : 'a', 2 : 'b'}
a[1]
'a'
a[2]
'b'
</code></pre></div></div>
<p>이런 방식으로 key 값을 입력하면 value 값을 돌려주게 된다.
리스트나 튜플에 경우엔 a[1] 이렇게 입력하면 2번째 있는 값을 돌려주지만 딕셔너리에선<br />
1이 key값을 이야기 하기에 value 값인 ‘a’를 돌려주게된다.<br />
만약 a[2]를 입력하면 value 값인 ‘b’를 돌려주게 된다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>특기 = {'동현' : 'SCUBA', '승윤' : '코딩'}
특기['동현']
'SCUBA'
</code></pre></div></div>
<p>이러한 방식으로 딕셔너리변수[key] 로 입력하여 SCUBA란 value를 얻을 수 있다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dic = {'name' : 'Dong', 'phone' : '01080143930', 'birth' : '940623'}
dic['name']
'Dong'
dic['phone']
'01080143930'
dic['birth']
'940623'
</code></pre></div></div>
<p>이런 방식으로도 구할 수 있다.</p>

<h3 id="딕셔너리-만들때-주의할-사항">딕셔너리 만들때 주의할 사항</h3>

<p>만약 키값이 동일하고 value 값은 다른 쌍들은 여러개 만든다면 어떻게 될까</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = {1 : 'a', 1 : 'b', 1 : 'c'}
a[1]
'c'
</code></pre></div></div>
<p>이렇게 앞에 있던 쌍들은 무시되고 마지막 쌍만 남게된다.</p>

<p>자 그리고 아까 이야기 했듯이 key값은 변화하지 못하는 값이라고 했다.<br />
그것처럼 key 값에 리스트는 사용이 불가는 하다. 하지만 튜플은 사용할 수 있다.<br />
그럼 한번 key 값에 리스트를 넣어보자.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = {[1, 2] : 'hi'}
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unhashable type: 'list'
</code></pre></div></div>
<p>이런 방식으로 오류가 나게된다.</p>

<p>그럼 한번 튜플을 넣어보자</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = {(1, 2) : 'hi'}
a[(1, 2)]
'hi'
</code></pre></div></div>
<p>튜플은 가능하다는걸 알 수 있다.
그리고 value 값은 아무거나 넣을 수 있다.</p>

<h2 id="딕셔너리-관련-함수들">딕셔너리 관련 함수들</h2>
<p>딕셔너리를 더욱 잘 활용 하기위해 딕셔너리의 함수들을 사용해보자.</p>

<h3 id="key-리스트-만들기">key 리스트 만들기</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = {'name' : 'Dong', 'phone' : '01080143930', 'birth' : '940623'}
a.keys()
dict_keys(['name', 'phone', 'birth'])
</code></pre></div></div>
<p>a.keys 는 Kye 값만을 모아서 dict_keys 객체을 돌려준다.
dict_keys 객체를 사용하는 방법은 리스트를 사용하는 것과 차이가 없지만 리스트 고유 함수는 수행이 불가능 하다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>for k in a.keys():
    print(k)
    
name
phone
birth    
</code></pre></div></div>
<blockquote>
  <p>print(k)를 입력할 때 들여쓰기를 꼭 해야한다. 아니면 오류가 발생하니 주의 해야한다.</p>
</blockquote>

<p>dict_keys 객체를 만약 리스트로 변환 하고 싶다면?</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>list(a.keys())
['name', 'phone', 'birth']
</code></pre></div></div>
<p>이런 방식으로 하면 된다.</p>

<h3 id="value-리스트-만들기">value 리스트 만들기</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a.values()
dict_values(['Dong', '01080143930', '940623'])
</code></pre></div></div>

<p>key를 얻는것과 마찬가지로 values 함수를 이용하면 dict_values 객체를 돌려준다.</p>

<h3 id="key-value-쌍-얻기">key, value 쌍 얻기</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a.items()
dict_items([('name', 'Dong'), ('phone', '01080143930'), ('birth', '940623')])
</code></pre></div></div>
<p>.items 함수를 이용하면 Key와 value 쌍을 튜플로 묶어서 dict_items 객체로 돌려주게 된다.<br />
이것도 dict_values, dict_items, dict_keys 객체랑 같게 리스트를 사용하는 것과 동일하게 사용 가능하다.</p>

<h3 id="key-value-쌍-모두-지우기">Key: Value 쌍 모두 지우기</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a.clear()
a
{}
</code></pre></div></div>
<p>clear 함수는 딕셔너리 요소들은 전부 삭제한다. 빈 리스트는 []로 빈 튜플은 (), 빈 딕셔너리는 감싸고있는
{}로 표현이 된다</p>

<h3 id="key로-value얻기">Key로 Value얻기</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = {'name' : 'Dong', 'phone' : '01080143930', 'birth' : '940623'}
a.get('name')
'dong'
a.get('phone')
'01080143930'
</code></pre></div></div>
<p>이전엔 우리는 함수가 아닌 a[]로 value 값을 구했다.<br />
이번엔 같은 value 값을 구하는 방법을 알아봤다.<br />
왜 같은 값을 구하는데 방법이 두가지 인지 의문이 들것이다.<br />
a.get 과 a[]로 구하면 차이점이 있는데 바로 a[]에서 없는 key값을 넣으면 오류가 발생을 한다.<br />
하지만 a.get 에서 없는 값을 넣는다면 오류가 아닌 None라는 값을 돌려준다.<br />
어떤 걸 사용하는지는 본인의 선택이다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = {'name' : 'Dong', 'phone' : '01080143930', 'birth' : '940623'}
a.get('zz')
None
a['kk']
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
KeyError: 'nokey'

</code></pre></div></div>
<p>만약 딕셔너리안에 없는 Key값을 디폴트 값을 대신 가져오게 하고 싶다면<br />
get(x, 디폴트 값)을 사용하면 된다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a.get('KK', 'hello')
'hello'
</code></pre></div></div>
<p>a 딕셔너리엔 KK 값이 없다 그러므로 hello 값을 돌려준다.</p>

<h3 id="key가-딕셔너리-안에-있는지-확인-하기">Key가 딕셔너리 안에 있는지 확인 하기</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = {'name' : 'Dong', 'phone' : '01080143930', 'birth' : '940623'}
'name' in a
True
'email' in a
False
</code></pre></div></div>
<p>이러한 방식으로 ‘key’ in 변수 형태로 입력을 하면 만약 key값이 있다면 True로 값을 돌려주고<br />
없다면 False로 값을 돌려준다.</p>

<p>이 포스팅은 점프투 파이썬을 보고 정리한 자료입니다.</p>]]></content><author><name>Dong Hyun Lim</name></author><category term="공부" /><category term="파이썬" /><category term="딕셔너리" /><category term="공부" /><category term="정리" /><summary type="html"><![CDATA[딕셔너리 자료형 딕셔너리는 뜻 그대로 해석하면 사전이란 의미이다. 대응관계를 나타내는 자료형으로 key : value 형태로 쓰인다. 리스트형이나 튜플과는 다르게 순차적으로 요소값을 구하는게 아닌 Kye를 통해 Velue를 얻는형태이다.]]></summary></entry><entry><title type="html">파이썬 튜플 자료형</title><link href="http://localhost:4000/%EA%B3%B5%EB%B6%80/2022/10/15/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%94%8C_%EC%9E%90%EB%A3%8C%ED%98%95.html" rel="alternate" type="text/html" title="파이썬 튜플 자료형" /><published>2022-10-15T01:15:00+09:00</published><updated>2022-10-15T01:15:00+09:00</updated><id>http://localhost:4000/%EA%B3%B5%EB%B6%80/2022/10/15/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%94%8C_%EC%9E%90%EB%A3%8C%ED%98%95</id><content type="html" xml:base="http://localhost:4000/%EA%B3%B5%EB%B6%80/2022/10/15/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%ED%8A%9C%ED%94%8C_%EC%9E%90%EB%A3%8C%ED%98%95.html"><![CDATA[<h1 id="튜플-자료형">튜플 자료형</h1>

<h2 id="튜플이란">튜플이란?</h2>
<p>튜플은 리스트와 비슷한 특성을 가지지만 차이점이 있다.<br />
일단 리스트는 값을 변화 시킬 수 있지만 튜플은 안에 있는값을 변화시킬 수 없다.
그리고 리스트는 []로 감싸지만 튜플은 ()로 감싸 사용하게 된다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>t1 = ()
t2 = (1,)
t3 = (1, 2, 3)
t4 = 1, 2, 3, 4
t5 = (2, 3, ('o', 'r'))
</code></pre></div></div>
<p>이러한 방식으로 튜플은 만들 수 있다.<br />
특이한 점이라면 값이 1개면 뒤에 ,를 적어줘야 한다.
그리고 괄호 없이도 만들 수 있다.</p>

<h2 id="튜플의-요소값-변화">튜플의 요소값 변화</h2>
<p>튜플과 리스트는 동일한 역활을 하지만 다른점은 튜플은 값이 변하지 않는다.
튜플의 값을 만약 바꿀려고 하면 어떻게 되는지 한번 알아보자.</p>

<h3 id="튜플-요소값-삭제">튜플 요소값 삭제</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>t1 = (1, 2, 'a', 'b')
del t4[0]"
</code></pre></div></div>
<p>만약 del 함수를 이용해서 삭제를 할려고 한다면 우리는 오류가 나는걸 볼 수 있다.</p>

<h3 id="튜플의-요솟값-변경">튜플의 요솟값 변경</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>t1 = (1, 2, 'a', 'b')
t1[0] = 'c'
</code></pre></div></div>
<p>이렇게 변경을 하려고 하더라도 오류가 나는걸 알 수 있다.</p>

<h2 id="튜플에서-가능한것">튜플에서 가능한것</h2>
<p>튜플은 값만 변화가 불가능하지 다른건 리스트랑 동일한 방식이다.<br />
그럼 가능한 것들을 한번 알아보자.</p>

<h3 id="튜플-인덱싱">튜플 인덱싱</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>t1 = (1, 3, 'v', 'e')
t1[0]
1
t[2]
'v'
</code></pre></div></div>
<p>이렇게 리스트와 동일하게 인덱싱이 가능하다.</p>

<h3 id="튜플-슬라이싱">튜플 슬라이싱</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>t1 = (1, 3, 'v', 'e')
t1[:3]
(1, 3, 'v')
</code></pre></div></div>
<p>이것도 마찬가지로 리스트랑 동일한 방식이다.</p>

<h3 id="튜플-더하기">튜플 더하기</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>t1 = (1, 3, 'v', 'e')
t2 = ('b', 'a')
t1 + t2
(1, 3, 'v', 'e', 'b', 'a')
</code></pre></div></div>
<p>더하는 방식도 리스트랑 동일하다.</p>

<h3 id="튜플-반복하기">튜플 반복하기</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>t2 = ('b', 'a')
t2 * 4
('b', 'a', 'b', 'a', 'b', 'a', 'b', 'a')
</code></pre></div></div>
<p>곱하기 표시도 동일하게 반복되어 나온다.</p>

<h3 id="튜플-길이-구하기">튜플 길이 구하기</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>t1 = (1, 3, 'v', 'e')
len(t1)
4
</code></pre></div></div>
<p>길이도 동일하다.</p>

<p>이 포스팅은 점프투 파이썬을 보고 정리한 자료입니다.</p>]]></content><author><name>Dong Hyun Lim</name></author><category term="공부" /><category term="파이썬" /><category term="튜플" /><category term="공부" /><category term="정리" /><summary type="html"><![CDATA[튜플 자료형]]></summary></entry><entry><title type="html">파이썬 리스트 자료형</title><link href="http://localhost:4000/%EA%B3%B5%EB%B6%80/2022/10/12/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%A6%AC%EC%8A%A4%ED%8A%B8_%EC%9E%90%EB%A3%8C%ED%98%95.html" rel="alternate" type="text/html" title="파이썬 리스트 자료형" /><published>2022-10-12T00:00:00+09:00</published><updated>2022-10-12T00:00:00+09:00</updated><id>http://localhost:4000/%EA%B3%B5%EB%B6%80/2022/10/12/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%A6%AC%EC%8A%A4%ED%8A%B8_%EC%9E%90%EB%A3%8C%ED%98%95</id><content type="html" xml:base="http://localhost:4000/%EA%B3%B5%EB%B6%80/2022/10/12/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%A6%AC%EC%8A%A4%ED%8A%B8_%EC%9E%90%EB%A3%8C%ED%98%95.html"><![CDATA[<h1 id="파이썬-리스트-자료형">파이썬 리스트 자료형</h1>

<p>이전에 배운 숫자형과 문자열만으론 프로그래밍 하기엔 부족한게 많다.<br />
집합을 만들거나 그런 표현을 하기엔 숫자형이나 문자형으로만 표현이 어렵다.<br />
그렇기에 우리는 자료형을 통해 표현하여 불편함을 해소하고 리스트를 만들어<br />
사용하면 좀더 편안하게 사용이 가능하다.
이제 리스트를 만들고 사용해보자.</p>

<h2 id="리스트-만드는법">리스트 만드는법</h2>

<p>만약 숫자 모음을 만들고 싶다 그럼 우리는 리스트를 통해 표현이 가능하다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = [1, 3, 5, 7, 9]
</code></pre></div></div>
<p>이런 방식으로 대괄호를 감싸고 각 요소값을 ,로 구분해 준다.</p>

<p>여러가지 리스트를 한번 만들어 보자</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = []
q = [1, 2, 3]
d = ['I', 'Love', 'You']
r = [2, 3, 'SCUBA', diving']
t = [5, 2, 'SCUBA', [4, 2]]
</code></pre></div></div>
<p>이러한 방식으로 리스트들을 만들수 있다.<br />
요소값을 비워서 만들거나, 혹은 숫자열, 문자열, 요소값 안에 <br />
리스트를 만들어 리스트 자체를 요소값으로도 만들수 있다.</p>

<h2 id="리스트의-인덱싱과-슬라이싱">리스트의 인덱싱과 슬라이싱</h2>
<p>리스트도 이전 문자열에서 했던것처럼 인덱싱과 슬라이싱이 가능하다.
하나씩 차근히 만들어가면서 배워보자.</p>

<h3 id="리스트-인덱싱">리스트 인덱싱</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = [5, 6, 7]
a 
[5, 6, 7]

a[0]
5
</code></pre></div></div>
<p>이것처럼 먼저 a에 변수값을 설정하고 a[0] a에 0 즉 첫번째 요소값인 5가 나온것이다.</p>

<p>이번에 요소값들은 더해 보자</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = [5, 6, 7]
a[0] + a[2]
12
</code></pre></div></div>
<p>이렇게 a[0]에 값인 5와 a[2] 값인 7이 더해져 12가 나오게 된다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = [3, 4, 5, ['b', 'c', 'd']]
a[0]
3
a[-1]
['b', 'c', 'd']
a[3]
['b', 'c', 'd']
</code></pre></div></div>

<p>이렇게 리스트안에 요소값으로 리스트를 만들고 a[-1] 또는 a[3]으로 그 리스트를 결과 값으로 가져올 수 있다.<br />
자 그럼 [3, 4, 5, [‘b’, ‘c’, ‘d’]] 이안에서 만약 c값만 인덱싱을 하고싶다면 어떻게 해야할까?</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = [3, 4, 5, ['b', 'c', 'd']]
a[-1][1]
'c'
</code></pre></div></div>
<p>이런 방식으로 a[-1]에서 두번째인 [1] 로 인덱싱을 하면 ‘c’값을 끄집어 낼수 있다.</p>

<blockquote>
  <h3 id="삼중-리스트-인덱싱">삼중 리스트 인덱싱</h3>
  <p>삼중 리스트는 자주 쓰이진 않지만 알아 두면 좋기 때문에 한번 알아보도록 하자.</p>
  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = [2, 3, ['b', 'c', ['Love', 'SCUBA']]] 
</code></pre></div>  </div>
  <p>이러한 방식으로 삼중으로 리스트를 만들었다 그럼 우리가 만약 ‘Love’ 문자열만 끄집어내고 싶다면 어떻게 해야할까?</p>
  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a[2][2][0]
'Love'
</code></pre></div>  </div>
  <p>이렇게 위에서 배운것처럼 a[2] 값인 [‘b’, ‘c’, [‘Love’, ‘SCUBA’]] 이 안에서 또 a[2][2] 값 <br />
[‘Love’, ‘SCUBA’] 가져오고 여기서 첫번째 a[2][2][0]으로 가져오면 ‘Love’ 가 나오게된다.</p>
</blockquote>

<h3 id="리스트-슬라이싱">리스트 슬라이싱</h3>
<p>리스트 슬라이싱 말그대로 문자를 나누는 방법이다. 저번 문자열 자료형에서 배웠듯이 리스트도 슬라이싱이 가능하다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = [1, 2, 3, 4, 5]
a[0:2]
[1, 2]
</code></pre></div></div>
<p>이렇게 슬라이싱이 되어 나온다. 문자열과 같은 방식으로 슬라이싱이 된다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = [1, 2, 3, 4, 5]
b = a[:3]
c = a[1:4]
b
[1, 2, 3]
c
[2, 3, 4] 
</code></pre></div></div>
<p>문자열처럼 여러 방식대로 슬라이싱을 해봤다. 이러한 방식으로 슬라이싱이 가능하다.</p>

<blockquote>
  <h3 id="중첩된-리스트-슬라이싱">중첩된 리스트 슬라이싱</h3>
  <p>이번엔 응용을 해서 중접된 리스트를 슬라이싱 해보자.</p>
  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a= [1, 2, 3, ['b', 'c', 'd'], 4]
a[1:]
[2, 3, ['b', 'c', 'd'], 4]
a[3][:2]
['b', 'c']
</code></pre></div>  </div>
  <p>이러한 방식으로도 슬라이싱이 가능하다.
첫번째는 그냥 리스트를 슬라이싱 한것 이고 두번째는 a[3][:2] a에4번째 값을 [0:2]로 슬라이싱 한것<br />
즉 [‘b’, ‘c’]가 된다.</p>
</blockquote>

<h2 id="리스트-연산">리스트 연산</h2>
<p>리스트도 문자열 숫자열과 같이 +는 더하기 *는 반복하기로 동일하다. <br />
한번씩 써보면서 배워보자.</p>

<h3 id="리스트-더하기-">리스트 더하기 +</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = [1, 2, 3]
b = [4, 5, 6]
a + b
[1, 2, 3, 4, 5, 6]
</code></pre></div></div>
<p>이러한 방식으로 더하면 리스트가 합쳐진다.</p>

<h3 id="리스트-반복-">리스트 반복 *</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = [2, 5, 6]
a * 4
[2, 5, 6, 2, 5, 6, 2, 5, 6, 2, 5, 6]
</code></pre></div></div>
<p>이렇게 리스트에 * 4 를 하면 리스트가 4번 반복이 된다.</p>

<h3 id="리스트-길이구하기">리스트 길이구하기</h3>
<p>이번엔 리스트의 길이를 한번 구해보자.<br />
리스트의 길이를 구하는 방법은 len 함수를 이용하면 구할 수 있다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = [1, 2, 3, 4, 5]
len(a)
5
</code></pre></div></div>
<p>이렇게 리스트의 길이를 구할 수 있다.</p>

<blockquote>
  <h3 id="리스트-연산-오류">리스트 연산 오류</h3>
  <p>리스트에서 값을 끄집어내서 문자열과 더하려고 한다 그럼 어떻게 해야할까?</p>
  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = [1, 2, 3]
a[2] + "hello"
</code></pre></div>  </div>
  <p>이렇게 생각을 할것 이다.
근데 이렇게하면 오류가 나게된다.<br />
문자열과 정수을 더하는건 불가능하다. 그래서 우린 정수를 문자열로 만들어 주어야 한다.</p>
  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> a = [1, 2, 3]
str(a[2]) + "hello"
'3hello' 
</code></pre></div>  </div>
  <p>이렇게 str 함수를 이용하여 3을 문자열로 만들어주면 가능하다.</p>
</blockquote>

<h2 id="리스트의-수정과-삭제">리스트의 수정과 삭제</h2>

<h3 id="리스트에서-값-수정">리스트에서 값 수정</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = [1, 2, 3]
a[2] = 4
a
[1, 2, 4]
</code></pre></div></div>
<p>이렇게 리스트 값을 수정할 수 있다.</p>

<h3 id="리스트-요소-삭제">리스트 요소 삭제</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = [1, 2, 3, 4]
del a[1]
a
[1, 3, 4]
</code></pre></div></div>
<p>del 함수를 이용하면 리스트의 요소를 삭제할 수 있다.
del 함수는 del 뒤에 삭제할 요소를 (우린 리스트에서 두번째 값을 삭제하기 위해 a[1]을 넣은것)<br />
넣어주면 삭제가 가능하다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = [1, 2, 3, ['a', 'b'] , 4]
del a[:3]
a
[['a', 'b'], 4]
</code></pre></div></div>
<p>이렇게 슬라이싱 기법으로 여러 개도 삭제가 가능하다.</p>

<h2 id="리스트-관련-함수들">리스트 관련 함수들</h2>
<p>문자열에서도 썻듯이 리스트 변수 뒤 .함수 이런방식으로 사용이 가능하다.<br />
자주 사용되는 함수들을 한번 보자.</p>

<h3 id="append-리스트에-요소-추가">append 리스트에 요소 추가</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = [5, 6, 7, 8]
a.append(9)
a
[5, 6, 7, 8, 9]
</code></pre></div></div>
<p>이 함수를 사용시 리스트 맨 마지막에 값을 추가해 준다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = [5, 6, 7, 8]
a.append(['a', 'b'])
a
[5, 6, 7, 8, ['a', 'b']]
</code></pre></div></div>
<p>이렇게 리스트도 추가할 수 있다.</p>

<h3 id="sort-리스트-정렬">sort 리스트 정렬</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = [5, 6, 2, 1]
a.sort()
a = [1, 2, 5, 6] 
</code></pre></div></div>
<p>이런 방식으로 순서대로 정리를 해준다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = ['하', '나', '강', '대']
a.sort()
['강', '나', '대', '하']
</code></pre></div></div>
<p>영문은 영문 알파벳순으로 한글도 순서대로 정렬해준다.</p>

<h3 id="reverse-리스트-뒤집기">reverse 리스트 뒤집기</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = ['a', 'd', 'b', 'c']
a.reverse()
a
['c', 'b', 'd', 'a']
</code></pre></div></div>
<p>reverse는 현재에 리스트를 역순으로 바꿔준다. 말그대도 뒤집어 주는거다.</p>

<h3 id="index-위치-반환">index 위치 반환</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = [5, 6, 7]
a.index(7)
2
a.index(5)
0
</code></pre></div></div>
<p>index는 리스트의 값의 자리를 반환해준다. 7을 넣었으니 리스트에서 7의 자리인 2를 돌려주고<br />
두번짼 5의 자리인 0을 돌려주게된다. 만약 리스트에 존재하지 않는 숫자를 넣는다면 오류가 발생한다.</p>

<h3 id="insert-리스트에-요소-삽입">insert 리스트에 요소 삽입</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = [5, 6, 7]
a.insert(3,1)
a
[5, 6, 7, 1]
</code></pre></div></div>
<p>insert(a,b)로 a는 삽입할 위치, b는 삽입할 요소로 a자리에 b를 넣는 함수라고 보면된다.<br />
위에 처럼 3자리(4번째)에 1을 삽입 하는것이다.</p>

<h3 id="remove-리스트-요소-제거">remove 리스트 요소 제거</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = [5, 4, 3, 5, 4, 3]
a.remove(5)
a
[4, 3, 5, 4, 3] 
</code></pre></div></div>
<p>remove(5)는 5란 숫자를 제거한 것이다. 5를 전부 삭제하는 것이 아닌 같은 값이 여러개면<br />
앞에있는게 먼저 제거된다.</p>

<h3 id="pop-리스트-요소-끄집어내기">pop 리스트 요소 끄집어내기</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = [1, 2, 3]
a.pop()
3
a
[1, 2]
</code></pre></div></div>
<p>pop() 아무것도 넣지 않는다면 맨마지막 숫자를 꺼내고 삭제한다.<br />
그래서 a는 1, 2 만 남게 된다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = [1, 2, 3]
a.pop(0)
1
a
[2, 3]
</code></pre></div></div>
<p>pop()에 자리 수를 넣어주면 그 자리에 있는 값을 꺼내고 삭제 한다. 
0 은 1번자리니 1을 꺼내오고 삭제해서 2와 3만 남게 된다.</p>

<h3 id="count-리스트에-포함된-요소의-갯수-세기">count 리스트에 포함된 요소의 갯수 세기</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = [2, 3, 2, 4, 2, 5]
a.count(2)
3
</code></pre></div></div>
<p>이런식으로 2를 넣으면 리스트에 있는 2의 갯수를 알려준다.</p>

<h3 id="extend-리스트-확장">extend 리스트 확장</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = [12, 13, 14, 15]
a.extend([16, 17])
a
[12, 13, 14, 15, 16, 17]
b = [18, 19]
a.extend(b)
a
[12, 13, 14, 15, 16, 17, 18, 19]
</code></pre></div></div>
<p>이렇게 extend()에 더할 리스트를 넣어주면 a+(추가할 리스트)로 계산이되어 추가가 된다.</p>

<p>이 포스팅은 점프투 파이썬을 보고 정리한 자료입니다.</p>]]></content><author><name>Dong Hyun Lim</name></author><category term="공부" /><category term="파이썬" /><category term="리스트" /><category term="공부" /><category term="정리" /><summary type="html"><![CDATA[파이썬 리스트 자료형]]></summary></entry><entry><title type="html">파이썬 문자열 자료형</title><link href="http://localhost:4000/%EA%B3%B5%EB%B6%80/2022/10/09/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%AC%B8%EC%9E%90%EC%97%B4_%EC%9E%90%EB%A3%8C%ED%98%95.html" rel="alternate" type="text/html" title="파이썬 문자열 자료형" /><published>2022-10-09T00:00:00+09:00</published><updated>2022-10-09T00:00:00+09:00</updated><id>http://localhost:4000/%EA%B3%B5%EB%B6%80/2022/10/09/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%AC%B8%EC%9E%90%EC%97%B4_%EC%9E%90%EB%A3%8C%ED%98%95</id><content type="html" xml:base="http://localhost:4000/%EA%B3%B5%EB%B6%80/2022/10/09/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EB%AC%B8%EC%9E%90%EC%97%B4_%EC%9E%90%EB%A3%8C%ED%98%95.html"><![CDATA[<h1 id="파이썬-문자열-자료형">파이썬 문자열 자료형</h1>

<p>문자열이란 문자 단어등으로 구성된 문자 집합들을 이야기한다.  문자열이라 해서 우리가 아는 언어만 들어가는게 아닌 숫자도 “에 들어가면 문자열로 인식된다.</p>

<h2 id="문자열-만드는-방법">문자열 만드는 방법</h2>
<p>문자열은 만드는 방법에 대해 알아보자면  “(큰 따옴표), ‘(작은 따옴표), “”“(큰 따옴표 3개) ‘’‘(작은 따옴표 3개) 를 양쪽에 둘러 싸는 방법이 있다.</p>

<h2 id="예제">예제</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>('Love', "SCUBA", """Freediving""", '''Water''')  
</code></pre></div></div>
<p>이런 방식을 통해 사용된다.<br />
이런 4가지 방법이 있는 이유는 상황에 맞게 큰 따옴표나 작은 따옴표를 사용 할 수 있게 있다.</p>

<h2 id="먼저-문자열에-가-포함되어-있는경우">먼저 문자열에 ‘가 포함되어 있는경우</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"I Love McDonald's Bugger" 
</code></pre></div></div>
<p>이런 문장에 ‘가 포함되어 있는경우는 “로 둘러싸 표현을 하면 된다.</p>

<h2 id="다음은-문자열에-를-사용하는-경우">다음은 문자열에 “를 사용하는 경우</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>'"I Love SCUBA" he Says.'  
</code></pre></div></div>
<p>이런 문자열에선 ‘ 따옴표를 추가 시켜 사용 할 수 있다.</p>

<h3 id="-사용-하기">\ 사용 하기</h3>
<p>또 한가지 오류가 나지 않도록 쓰는 방법이 있는데 \를 따옴표 앞에 사용할 경우 그 따옴표는 문자로 입력이 된다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>'I Love McDonald\'s Bugger'
</code></pre></div></div>
<p>이러한 방법으로도 사용이 가능하다.</p>

<h2 id="여러줄-문자열-입력">여러줄 문자열 입력</h2>
<p>문자열을 여러줄을 사용 하고 싶으면 매 줄마다 “” 를 입력 할 수도 있지만</p>

<p>그런 번거로운 작업이 아닌 \n(이스케이프코드), “””, ‘’’ 를 이용하면 여러줄의 문자열이 입력이 가능하다.</p>

<h3 id="n-을-이용한-줄-바꾸기">\n 을 이용한 줄 바꾸기</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>'My name is Dong Hyun Lim.\nDo You Like Bugger?'  
'My name is Dong Hyun Lim.  
Do You Like Bugger?'
</code></pre></div></div>
<p>이러한 방식으로 사용이 가능하다.</p>

<h3 id="-혹은--사용하기">””” 혹은 ‘’’ 사용하기</h3>
<p>위에 방식은 좋은나 문장이 길어지고 보기 불편 하다.<br />
그래서 큰 따옴표 3개나 작은 따옴표 3개를 이용해 간단하게 줄을 바꿀 수 있다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"""My name is Dong Hyun Lim.  
Do You Like Bugger?"""
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>'''I Live Bugger.  
You Like Bugger?'''
</code></pre></div></div>
<p>이러한 방식을 이용해서 작성이 가능하다.</p>

<h2 id="이스케이프코드">이스케이프코드</h2>
<p>이스케이프 코드란 프로그래밍 할때 쓰이도록 미리 설정된 문자 조합이다.<br />
주로 출력물을 보기 편하게 정렬할때에 쓰인다.<br />
자주 사용되는 이스케이프 코드 몇가지를 알아보도록 하자.</p>
<h3 id="n">\n</h3>
<p>문자열 안에서 줄을 바꿀때 쓰임</p>
<h3 id="t">\t</h3>
<p>탬 간격을 줄 때 사용</p>
<h3>\\</h3>
<p>\를 그대로 쓰기 위해 사용</p>
<h3 id="-1">\’</h3>
<p>‘를 그대로 쓰기 위해 사용</p>
<h3 id="-2">\”</h3>
<p>“를 그대로 쓰기 위해 사용</p>

<h2 id="문자열-연산">문자열 연산</h2>
<p>문자열을 더하거나 곱할 수 있는게 파이썬의 재미난 특징이다.<br />
다음은 문자열을 더하고 곱하는 여러가지 방법을 알아볼 것이다.</p>

<h3 id="문자열-더하기">문자열 더하기</h3>
<p>간단하게 문자열을 숫자처럼 더하는 방식</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = 'I Love'  
b = 'You'  
a + b  
'I Love You'  
</code></pre></div></div>

<p>이런 방식으로 문자열을 더할수 있다.</p>

<h3 id="문자열-곱하기">문자열 곱하기</h3>
<p>문자열을 곱하는 방법으로 예시로 알아보자</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = 'SCUBA'  
a * 2  
'SCUBASCUBA' 
</code></pre></div></div>

<p>이렇게 곱하기를 쓰면 두번 반복되어 나오게 된다.</p>

<h3 id="문자열-길이-구하기">문자열 길이 구하기</h3>
<p>len 함수를 사용 하면 문자열의 길이를 알수 있다.
a = ‘I Have Water’<br />
len(a)<br />
12</p>

<p>이렇게 len 함수를 이용하면 문자열의 길이를 알수 있다.</p>

<h2 id="문자열-인덱싱과-슬라이싱">문자열 인덱싱과 슬라이싱</h2>
<p>Indexing은 가리킨다라는 의미이고 ,Slicing 자른다 라는 의미다. 이것처럼 문장을 자르고 가르키는 방법을 알아보자.</p>

<h3 id="인덱싱">인덱싱</h3>
<p>a = ‘I Love SCUBA’<br />
이런 문장에서 내가 3번째 위치한 L를 구하고 싶다면 a[3] 이렇게 입력을 보통 할것이다.<br />
하지만 우리는 a[2] 를 입력 해야 한다. 왜 그럴까?<br />
파이썬은 1부터가 아닌 0부터 시작을 한다. 그러므로 L을 도출 하기위해선 0-1-2 순서로 2를<br />
입력해야 L을 구해준다.</p>

<p>그럼 한번 인덱싱을 이용해보자</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> a = 'I Love SCUBA'  
 a[4]  
 'v'
 a[10]
 'U'
 a[-1]
 'A'
 a[-5]
 'S'
</code></pre></div></div>
<p>이렇게 구해진다. 여기서 좀 생소한 -가 있다 이건 뒤에서 부터 셀때 쓰인다.
-0과0은 같기 때문에 -는 0부터가 아닌 -1부터 쓰인다.</p>

<h3 id="문자열-슬라이싱">문자열 슬라이싱</h3>
<p>위에선 우린 한 글자만 뽑아 왔다 하지만 우린 단어나 중간 문장을 뽑아 오고 싶을 수 있다.<br />
그럴땐 슬라이싱 기법을 사용하면 뽑아 올수 있다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = 'I Love SCUBA'
b = a[2] + a[3] + a[4] + a[5]
b
'Love'
</code></pre></div></div>
<p>위에 처럼 할 수 있지만 우리는 더 편한 방법을 추구한다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = 'I Love SCUBA'
a[2:6]
'Love'
</code></pre></div></div>
<p>이러한 방식으로 Love를 뽑아 낼수 있다.<br />
하지만 의문이 들것이다. 왜 a[2:5]이 아닌 a[2:6]인가<br />
이건 a[시작번호:끝번호] 이지만 지정한 끝번호는 포함하지 않기 때문에<br />
우린 그 다음번호로 입력을 해야지 우리가 원하는 위치까지 뽑아 올수있다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = 'I Love SCUBA'
a[7:]
'SCUBA'
</code></pre></div></div>
<p>이런 방식으로 입력하면 시작번호 부터 마지막 끝까지 뽑아온다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = 'I Love SCUBA'
a[:6]
'I Love'
</code></pre></div></div>
<p>반대로 시작 번호를 비우면 처음부터 시작하여 마지막 번호까지 뽑아온다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = 'I Love SCUBA'
a[:]
'I Love SCUBA'
</code></pre></div></div>
<p>아무것도 입력 하지 않는다면 처음부터 끝까지 뽑아오게 된다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = 'I Love SCUBA'
a[2:-5]
'Love'
</code></pre></div></div>
<p>-표현도 당연히 사용이 가능하다.</p>

<h3 id="슬라이싱으로-문자열-나누기">슬라이싱으로 문자열 나누기</h3>

<p>위에 방식을 이용하여 문자열을 나눠서 표현도 가능하다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = "20221010suny"
date = a[:8]
weather = a[8:]
date
'20201010'
weather
'sunny' 
</code></pre></div></div>
<p>이런 형식으로 나눠서도 표현이 가능하다.</p>

<p>똑같이 응용하여 3개로도 나눌 수 있다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = "20221010suny"
year = a[:4]
dat = a[4:8]
weather = a[8:]
year
'2022'
day
'1010'
weather
'sunny'
</code></pre></div></div>
<p>이런 방식을 통해 나눌수 있다. 4개도 5개도 가능 하다.</p>

<blockquote>
  <h3 id="글자-바꾸기">글자 바꾸기</h3>
  <p>SCUVA 란 글자를 SCUBA로 바꿔보자</p>

  <p>단순히 V를 B로 바꾼다고 생각하면</p>
  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = "SCUVA"
a[3]
'V'
a[3] = 'B'
</code></pre></div>  </div>
  <p>이런 방식을 사용하면 오류가 나게된다. 
위에서 배웠던 슬라이싱 기법으로 바꿔보자면</p>
  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = "SCUVA"
a[:3]
'SCU'
a[4:]
'A'
a[:3] + 'B' + a[4:]
'SCUBA'
</code></pre></div>  </div>
  <p>이러한 방식으로 문자를 슬라이싱해 글자를 더해서 바꿀수 있다.</p>
</blockquote>

<h2 id="문자열-포매팅">문자열 포매팅</h2>

<h3 id="숫자-바로-대입하기">숫자 바로 대입하기</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"I eat %d bugger." % 3
'I eat 3 bugger.'
</code></pre></div></div>
<p>위에 방식으로 %d 라는 숫자 포매팅을 이용해 숫자를 대입 하는 방법이 있다.</p>

<h3 id="문자열-대입">문자열 대입</h3>
<p>이번엔 숫자가 아닌 문자를 포매팅을 이용해 넣어 보겠다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"I eat %s bugger." % "two"
'I eat tow bugger.'
</code></pre></div></div>
<p>이러한 방식으로 위에선 숫자랑 다르게 %s를 이용 하여 문자열을 대입할수 있다.</p>

<h3 id="숫자를-변수로-대입-하기">숫자를 변수로 대입 하기</h3>
<p>이번엔 변수를 이용하여 대입해 보도록 하자.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = 2
"I eat %d bugger" % a
'I eat 2 bugger'
</code></pre></div></div>
<p>이런 방식으로 변수로도 입력이 가능하다.</p>

<h3 id="2개-이상의-값-넣기">2개 이상의 값 넣기</h3>
<p>위에선 한개씩 넣어봤지만 이번엔 여러개의 값을 입력해 보자.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = 2
b = 'sunny'
"I eat %d bugge. today's weather is %s." % (a, b)
'I eat 2 bugge. today's weather is sunny.'
</code></pre></div></div>
<p>이렇게 () 안에 , 표시로 구분해 넣어주면 여러개의 값을 입력 할수 있다.</p>

<h3 id="문자열-포맷코드">문자열 포맷코드</h3>
<blockquote>
  <p>%s: 문자열을 넣을때 쓰는 코드.<br />
%c: 문자 한개를 넣을때 쓰는 코드.<br />
%d: 정수를 넣을때 쓰는 코드.<br />
%f: 부동소수를 넣을때 쓰는 코드.<br />
%o: 8진수를 넣을때 쓰는 코드.<br />
%x: 16진수를 넣을때 쓰는 코드.<br />
%%: %를 그대로 표현하기 위해 쓰는코드.</p>
</blockquote>

<p>이때 재밌는 포맷코드가 %s 코드 인데 이 코드는 문자만이 아닌<br />
숫자나 소수를 전부 입력이 가능하다.<br />
%s는 자동으로 입력값은 문자열로 바꿔인식 하기 때문에 다 입력이 가능하다.</p>

<p>그리고 우리가 만약 %를 포맷코드가 있는 문자열에 넣고 싶다.<br />
그렇다면 간단하게 생각하면 그냥 뒤에 %을 붙이면 될꺼란 생각을 하지만<br />
그냥 입력 하게된다면 오류가 나게된다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"loding %d%" % 97 
</code></pre></div></div>
<p>이러한 방식이 아닌</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"loding %d%%" % 97
'Loding 97%'
</code></pre></div></div>
<p>이렇게 입력을 해야 한다.</p>

<h2 id="포맷-코드와-숫자-함께-사용하기">포맷 코드와 숫자 함께 사용하기</h2>
<p>이번엔 포맷 코드와 숫자를 함께 사용해 다양한 방법으로 사용하는 방법을 배워보자.</p>

<h3 id="정렬과-공백">정렬과 공백</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"%10s" % "hello"
'     hello'
</code></pre></div></div>
<p>이렇게 코드 중간에 숫자10을 넣으면 전체길이가 10개이고 나머진 공백인 문자가 입력이 된다.</p>

<p>반대로 -10을 입력하면</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"%-10Dong" % "hello"
'hello     Dong'
</code></pre></div></div>
<p>이렇게 왼쪽 정렬이 되고 hello 옆 5칸을 공백이 생기게 된다.</p>

<h3 id="소수점-표현">소수점 표현</h3>
<p>우리가 만약 긴 소수점중에 뒤에 원하는 자리까지만 표현은 하고 싶다면</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"%0.3f" % 3.141592654
'3.141'
</code></pre></div></div>
<p>이렇게 %뒤에 표현하고 싶은 자리수를 입력하면 그 자리수까지 표현이 된다.</p>

<p>만약 여기서 0.3이 아닌 위에처럼 소수점 앞에도 숫자를 입력하면 어떻게 될까?</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"%10.3f" % 3.141592654
'     3.141'
</code></pre></div></div>
<p>이런식으로 소수점 4번째까지 표시하고 전체 길이가 10개인 문자열을 오른쪽 정렬하게 된다.</p>

<h2 id="format-함수를-이용한-포매팅">format 함수를 이용한 포매팅</h2>
<p>이번에 format 함수를 이용해 앞에서 했던 문자열을 만들어보자.</p>

<h3 id="숫자-대입하기">숫자 대입하기</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"I eat {0} bugger".format(2)
'I eat 2 bugger'
</code></pre></div></div>
<p>이러한 방식으로 숫자를 넣을공간에 {0}을 입력하고 뒤에 format(2) 입력하면 2가 입력이 된다.</p>

<h3 id="문자열-대입하기">문자열 대입하기</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"I eat {0} bugger".format("two")
'I eat two bugger'
</code></pre></div></div>
<p>위와 같은 방식으로 대입하면 가능하다.</p>

<h3 id="변수로-대입하기">변수로 대입하기</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = 2
"I eat {0} bugger".format(a)
'I eat 2 bugger'
</code></pre></div></div>
<p>변수도 마찬가지로 대입하면 가능하다.</p>

<h3 id="2개-이상의-변수-대입">2개 이상의 변수 대입</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = 2
b = 'sunny'
"I eat {0} bugge. today's weather is {1}.".format(a, b)
'I eat 2 bugge. today's weather is sunny.'
</code></pre></div></div>
<p>2개 이상의 값을 넣을땐 {0}, {1} 이런식으로 순서대로 넣으면 입력값 순서대로 들어간다. 
{0}은 첫번째 값이 2 {1}은 두번째 값인 Sunny가 입력이 된다.</p>

<h3 id="이름으로-넣기">이름으로 넣기</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"I eat {a} bugge. today's weather is {b}.".format(a=2, b='sunny')
'I eat 2 bugge. today's weather is sunny.'
</code></pre></div></div>
<p>이러한 방식으로 변수값 자체를 format() 안으로 집어넣어서도 사용이 가능하다.</p>

<h3 id="혼용사용-하기">혼용사용 하기</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"I eat {0} bugge. today's weather is {b}.".format(2, b='sunny')
'I eat 2 bugge. today's weather is sunny.'
</code></pre></div></div>
<p>이러한 방식으로 인덱스와 이름을 혼용해서 사용할 수 있다.</p>

<h3 id="왼쪽-정렬">왼쪽 정렬</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"{0:&lt;10}".format("hello")
'hello     '
</code></pre></div></div>
<p>:&lt;10 을 이용하면 왼쪽 정렬을 하고 총 10자리 문자열로 만들 수 있다.</p>

<h3 id="오르쪽-정렬">오르쪽 정렬</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"{0:&gt;10}".format("hello")
'     hello'
</code></pre></div></div>
<p>:&gt;10 을 이용하면 오른쪽으로 정렬 하고 10자리 문자열을 만든다.</p>

<h3 id="가운데-정렬">가운데 정렬</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"{0:^11}".format("hello")
'   hello   '
</code></pre></div></div>
<p>:^ 는 가운데 정렬을 해준다.</p>

<h3 id="공백-채우기">공백 채우기</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"{0:!&lt;10}".format("hello")
'hello!!!!!'

"{0:#^11}".format("hello")
"###hello###'
</code></pre></div></div>
<p>이렇게 정렬 표시 앞쪽에 공백에 넣을 문자를 넣어주면 공백을 그 문자로 채워준다.</p>

<h3 id="소수점-표현-1">소수점 표현</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = 3.141592654
"{0:0.3f}".format(a)
'3.141'
</code></pre></div></div>
<p>이러한 방식으로 .fromat 방식으로 앞에 0.3f 사용하여 소수점을 표현 하고싶은 자리까지 표현이 가능하다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"{0:10.3f}".format(a)
'     3.141'
</code></pre></div></div>
<p>앞에와 같이 10.3f 로 10자리 숫자로도 맞출 수 있다.</p>

<h3 id="-그대로-표현하기">{ 그대로 표현하기</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"{{ SCUBA }}".format()
'{ SCUBA }'
</code></pre></div></div>

<p>만약 .fromat 함수를 이용해서 {를 그대로 표현하고 싶다면 {를 {{이런 방식으로 두번 써주면 표현이 가능하다.</p>

<h2 id="f문자열-포매팅">f문자열 포매팅</h2>

<p>파이썬 3.6버전 부턴 f 문자열 포매팅이 사용이 가능하다.<br />
f 문자열 포매팅을 사용하는 방법으론 <br />
사용할 문자열 앞에 f를 붙이면 사용이 가능하다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = "임동현"
b = 29
f'내 이름은 {a}입니다. 나이는 {b}입니다.'
'내 이름은 임동현입니다. 나이는 29입니다.'
</code></pre></div></div>
<p>이렇게 변수를 만들고 값을 넣어 표현이 가능하다.</p>

<p>그리고 표현식을 지원 하기에 이런것도 가능하다.<br />
(표현식이란 문자열 안에 변수와 +,- 같은 수식을 같이 사용하는걸 이야기함)</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = 29
f'저는 내년에 {a+1}살이 됩니다.'
'저는 내년에 30살이 됩니다.'
</code></pre></div></div>
<p>그리고 추후 배울 딕셔너리도 사용이 가능하다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = {'name':'임동현', 'age':30}
f'내 이름은 {a["name"]}입니다. 나이는 {a["age"]}입니다.'
'내 이름은 임동현입니다. 나이는30살입니다.
</code></pre></div></div>

<p>다음은 정렬 방법이다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>f'{"hello":&lt;10}' (왼쪽 정렬)
'hello     '
f'{"hello":&gt;10}' (오른쪽 정렬)
'     hello'
f'{"hello":^11}' (가운데 정렬)
'   hello   '
</code></pre></div></div>
<p>이렇게 정렬도 가능하다.</p>

<p>다음은 공백을 채우는 방법이다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>f'{"hello":$&lt;10}' 
'hello$$$$$'
f'{"hello":~^11}' 
'~~~hello~~~'
</code></pre></div></div>
<p>정렬 표시 앞쪽에 채울 기호를 넣으면 채워서 출력이 된다.</p>

<p>이번엔 소수점 표를 알아보자.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = 3.141592654
f'{a:0.4f}'
'3.1415
f'{a:10.4f}'
"    3.1415'
</code></pre></div></div>
<p>이렇게 동일하게 표현이 가능하다.</p>

<p>만약 { 표시를 그대로 사용하고 싶다면?</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>f"{{ SCUBA }}"
'{ SCUBA }'
</code></pre></div></div>
<p>이렇게 {{ 이렇게 두번 입력하여 사용이 가능하다.</p>

<h2 id="문자열-관련-함수들">문자열 관련 함수들</h2>
<p>문자열 자료형은 여러 자체적인 함수를 가지고 있다.<br />
함수를 사용하기 위해선 .함수이름 이런 식으로 사용이 가능하다.</p>

<h3 id="문자-개수-세기">문자 개수 세기</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = 'bugger'
a.count('g')
2
</code></pre></div></div>
<p>.count 함수를 이용하면 문자의 갯수를 알수 있다.</p>

<h3 id="위치-찾기">위치 찾기</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = 'I Love SCUBA'
a.find('e')
5
a.find('d')
-1
</code></pre></div></div>
<p>.find 함수를 사용하면 문자가 처음나온 위치번호를 알려준다.
만약 문자열에 존재 하지 않는다면 -1로 표시가된다.</p>

<h3 id="위치-찾기2">위치 찾기2</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = 'I Love SCUBA'
a.index('e')
5
a.index('d')

ValueError: substring not found
</code></pre></div></div>
<p>.index 함수를 사용하면 .find와 같이 문자가 처음나온 위치를 알려준다 하지만 문자가 없을경우<br />
.find 함수와는 다르게 오류가 발생을 한다.</p>

<h3 id="문자열-삽입">문자열 삽입</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>",".join('abcd')
'a,b,c,d'
</code></pre></div></div>
<p>.join 함수를 이용하면 abcd 문자열 사이에 , 을 삽입한다.</p>

<h3 id="소문자를-대문자로-바꾸기">소문자를 대문자로 바꾸기</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = "hello"
a.upper()
'HELLO'
</code></pre></div></div>
<p>.upper 함수는 소문자를 대문자로 바꿔준다.<br />
만약 문자열이 이미 대문자라면 아무 변화가 없다.</p>

<h3 id="대문자를-소문자로-바꾸기">대문자를 소문자로 바꾸기</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = "HELLO"
a. lower()
'hello'
</code></pre></div></div>
<p>.lower 함수를 이용하면 대문자를 소문자로 바꿔준다.</p>

<h3 id="공백지우기">공백지우기</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = " hello "
a. lstrip()
'hello '

a. rstrip()
' hello'

a.strip()
'hello'
</code></pre></div></div>
<p>.lstrip 함수는 한칸 이상의 연속된 왼쪽 공백을 지우고, .rstrip 함수는 한칸 이상의 연속된<br />
오른쪽 공백을, .strip 함수는 양쪽 있는 한칸 이상의 연속된 공백을 지운다.</p>

<h3 id="문자열-바꾸기">문자열 바꾸기</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = "I Love SCUBA"
a.replace("I", "You")
'You Love SCUBA'
</code></pre></div></div>
<p>.replace(바꿔줄 문자, 바꿀 문자) 이렇게 입력을 하면 문자열 안의 값을 바꿔준다.</p>

<h3 id="문자열-나누기">문자열 나누기</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = "I Love SCUBA"
a.split()
['I', 'Love', 'SCUBA']

b = "d:b:a:w"
b.split(:)
['d', 'b', 'a', 'w']
</code></pre></div></div>

<p>.split 함수를 이용하면 아무것도 괄호 안에 넣지 않으면 공백을 기준으로 나눠주고<br />
만약 ()안에 특정 값을 넣어주면 그 값을 구분하여 나눠준다.</p>

<p>이 포스팅은 점프투 파이썬을 보고 정리한 자료입니다.</p>]]></content><author><name>Dong Hyun Lim</name></author><category term="공부" /><category term="파이썬" /><category term="문자열" /><category term="공부" /><category term="정리" /><summary type="html"><![CDATA[파이썬 문자열 자료형]]></summary></entry><entry><title type="html">파이썬 숫자형</title><link href="http://localhost:4000/%EA%B3%B5%EB%B6%80/2022/10/05/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EC%88%AB%EC%9E%90%ED%98%95.html" rel="alternate" type="text/html" title="파이썬 숫자형" /><published>2022-10-05T00:00:00+09:00</published><updated>2022-10-05T00:00:00+09:00</updated><id>http://localhost:4000/%EA%B3%B5%EB%B6%80/2022/10/05/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EC%88%AB%EC%9E%90%ED%98%95</id><content type="html" xml:base="http://localhost:4000/%EA%B3%B5%EB%B6%80/2022/10/05/%ED%8C%8C%EC%9D%B4%EC%8D%AC_%EC%88%AB%EC%9E%90%ED%98%95.html"><![CDATA[<h1 id="파이썬-숫자형">파이썬 숫자형</h1>

<p>숫자로 이루어진 형태를 이야기 하고 정수, 실수, 8진수, 16진수를 사용함</p>

<h2 id="정수형">정수형</h2>

<p>정수란 0을 포함한 양의 정수(1,42,152) 음의 정수(-25, -332)를 이야기 한다.<br />
 이것을 대입하는것을 정수형 파이썬이다. 대입 하자면 q = 1, t = -112, i = 0 이런 방식으로 사용 된다.</p>

<h2 id="실수형">실수형</h2>

<p>실수란 소수점을 포함한 숫자를 이야기 한다.<br />
대입 하자면 b = 2.56, r = -3.14 이런 방식으로 사용 된다.
또 다른 표현 방식이 있는데 컴퓨터식 지수 표현 방식으로 <br />
q=5.23e6 이런 표현 방식도 사용한다. (q=5230000) 반대로 q=5.23e-6은 (q=0.00000523)이 된다.</p>

<h2 id="8진수와-16진수">8진수와 16진수</h2>

<p>8진수를 만들기 위해서는 (Octal) 즉 0뒤에 영어 o(소문자 대문자 전부 사용가능) 넣고 숫자를 넣으면 8진수를 사용 할 수 있다.<br />
0o167(8진수)=119(10진수) 이런식으로 사용된다.</p>

<p>16진수를 만들기 위해서는 0뒤에 x를 붙여주면 된다. (이것도 대문자 소문자 구분 없음)<br />
0x12df(16진수)=6141(10진수) 이런 식으로 사용된다.</p>

<h2 id="사칙-연산">사칙 연산</h2>

<p>사칙 연산도 파이썬에서 계산기처럼 연산자를 이용해 계산된다.(+, -, /, *)</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>h = 10 
q = 2
h + q
12

h * q
20
</code></pre></div></div>
<p>이런 방식으로 계산되어 나온다.</p>

<p>여기에 이제 제곱도 가능한데 제곱을 만드는 방법은 곱하기 표시인 * 를 2번 입력하면 앞에 자리에 뒤에 숫자를 제곱자리에 올려 계산하게 된다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>w = 2
t = 4
w ** t 
16
</code></pre></div></div>
<p>이렇게 계산되어 나온다.</p>

<p>또 다른 형식으로 /가 아닌 % 형식도 있는데 이건 나누고 나머지 값을 돌려주는 연산자이다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>5 % 2
1
2 % 5
2
</code></pre></div></div>
<p>이런식으로 나누고 남은 나머지 값을 돌려준다.</p>

<p>제곱처럼 ** 방식이 있듯이 나눗셈을 두번 입력하는 // 이런 연산자도 존재 하는데 나눗셈을 한 다음 몫을 반환하는 연산자 이다.<br />
보통 9 / 2 를 하면 나눠지는 값인 4.5가 나오게 된다. 하지만 // 를 입력하게 되면</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>9 // 2
4
</code></pre></div></div>
<p>이런식으로 나누고 남는 정수값 4를 출력해준다.</p>

<p>이 포스팅은 점프투 파이썬을 보고 정리한 자료입니다.</p>]]></content><author><name>Dong Hyun Lim</name></author><category term="공부" /><category term="파이썬" /><category term="숫자형" /><category term="공부" /><category term="정리" /><summary type="html"><![CDATA[파이썬 숫자형]]></summary></entry><entry><title type="html">리눅스 명령어 포스팅</title><link href="http://localhost:4000/%EA%B3%B5%EB%B6%80/2022/10/03/%EB%A6%AC%EB%88%85%EC%8A%A4_%EC%BB%A4%EB%A7%A8%EB%93%9C.html" rel="alternate" type="text/html" title="리눅스 명령어 포스팅" /><published>2022-10-03T00:00:00+09:00</published><updated>2022-10-03T00:00:00+09:00</updated><id>http://localhost:4000/%EA%B3%B5%EB%B6%80/2022/10/03/%EB%A6%AC%EB%88%85%EC%8A%A4_%EC%BB%A4%EB%A7%A8%EB%93%9C</id><content type="html" xml:base="http://localhost:4000/%EA%B3%B5%EB%B6%80/2022/10/03/%EB%A6%AC%EB%88%85%EC%8A%A4_%EC%BB%A4%EB%A7%A8%EB%93%9C.html"><![CDATA[<h1 id="리눅스-명령어-정리">리눅스 명령어 정리</h1>

<h2 id="pwd">PWD</h2>
<h3 id="print-working-directory">(print working directory)</h3>
<p>현재 작업중인 디렉토리 정보 출력</p>

<h2 id="cd">cd</h2>
<h3 id="change-directory">(change directory)</h3>
<p>경로 이동, 절대경로와 상대 경로로 이동 가능하다.</p>

<h2 id="ls">ls</h2>
<h3 id="list">(list)</h3>
<p>디렉토리 목록 확인</p>

<h2 id="cp">cp</h2>
<h3 id="copy">(copy)</h3>
<p>파일 혹은 디렉토리를 복사</p>

<p>디렉토리를 복사할때에는 -r 옵션을 주어야함</p>

<h2 id="mv">mv</h2>
<h3 id="move">(move)</h3>
<p>파일 혹은 디렉토리를 이동</p>

<p>실제로 원하는 위치로 이동할 때에도 사용하지만, 이름을 변경하는 용도로도 사용</p>

<p>cp와는 달리 디렉토리를 이동할 때에도 별다른 옵션이 필요 없음</p>

<h2 id="mkdir">mkdir</h2>
<h3 id="make-directory">(make directory)</h3>
<p>디렉토리 생성</p>

<p>윈도우에서 파일 정리를 위해 새 폴더를 만드는 것처럼 리눅스에서도 새 디렉토리를 생성 하기위해 mkdir 명령어를 사용</p>

<p>-p 옵션을 주면 하위 디렉토리까지 한 번에 생성 가능 .</p>

<h2 id="rm">rm</h2>
<h3 id="remove">(remove)</h3>
<p>파일이나 디렉토리를 삭제</p>

<p>디렉토리를 삭제할때는 r 옵션을 주어야 함</p>

<p>-f 옵션을 주면 사용자에게 삭제 여부를 묻지 않고 바로 삭제함</p>

<p>디렉토리를 삭제할 때에는 하위 디렉토리까지 모두 삭제되므로 유의</p>

<h2 id="cat">cat</h2>
<h3 id="concatenate">(concatenate)</h3>
<p>파일은 연결하기위해 만들어진 명령어</p>

<p>단순히 파일의 내용을 출력할 수도 있고,</p>

<p>파일 여러개를 합쳐서 하나의 파일로 만들 수도 있음.</p>

<p>그리고 기존 한 파일의 내용을 다른 파일에 덧붙일수도 있음.</p>

<h2 id="grep">grep</h2>
<p>특정 파일에서 지정한 문자열이나 정규 표현식을 포함한 행을 출력해주는 명령어</p>

<h2 id="vi">vi</h2>
<p>파일을 편집할때 쓰는 명령어
리눅스에서 vi 파일명을 입력하면 vi편집상태로 변함</p>

<p>커서 이동을 위해선 h(왼쪽으로) j(아래로) k(위로) l(오른쪽으로)</p>

<p>문자를 삽입 하기 위해서 a(커서 오른쪽에 문자 삽입) A(커서 오른쪽, 행끝에 삽입)<br />
i(커서 왼쪽에 삽입) I(커서 왼쪽 제일 처음에 삽입) o(커서아래에 행 삽입)<br />
O(커서 위에 행삽입) ESC(삽입 모드 종료)<br />
u(이전 명령 취소)</p>

<p>탐색을 하기위한 명령어
/{검색할문자열} 오른쪽 아래로 문자열 검색
?{검색할문자열} 왼쪽 위로 문자열 검색</p>

<p>저장을위한 명령어
:w 변경 사항을 저장
:W파일명 변경 사항을 파일명으로 저장</p>

<p>종료를 위한 명령어
:q 편집기가 종료
:q! 변경된 내용일 있더라돟 저장하지 않고 무조건 종료
:wq 변경된 내용 저장하고 종류</p>]]></content><author><name>Dong Hyun Lim</name></author><category term="공부" /><category term="리눅스 명령어" /><category term="공부" /><category term="정리" /><summary type="html"><![CDATA[리눅스 명령어 정리]]></summary></entry><entry><title type="html">동동이 블로그</title><link href="http://localhost:4000/%EA%B3%B5%EC%A7%80/2022/09/28/divinggecko.html" rel="alternate" type="text/html" title="동동이 블로그" /><published>2022-09-28T00:00:00+09:00</published><updated>2022-09-28T00:00:00+09:00</updated><id>http://localhost:4000/%EA%B3%B5%EC%A7%80/2022/09/28/divinggecko</id><content type="html" xml:base="http://localhost:4000/%EA%B3%B5%EC%A7%80/2022/09/28/divinggecko.html"><![CDATA[<h1 id="안녕하세요-동동이-블로그입니다">안녕하세요 동동이 블로그입니다.</h1>
<p>이제부턴 여기서 글을 쓸 예정입니다.
<img src="../../../../../images/DSC01079.jpg" alt="바다사진" /></p>]]></content><author><name>Dong Hyun Lim</name></author><category term="공지" /><category term="시작" /><category term="공지" /><summary type="html"><![CDATA[안녕하세요 동동이 블로그입니다. 이제부턴 여기서 글을 쓸 예정입니다.]]></summary></entry></feed>